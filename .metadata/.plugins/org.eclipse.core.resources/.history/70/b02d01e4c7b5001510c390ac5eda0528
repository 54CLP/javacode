import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class CP1to1 {
public static void main(String[] args) {
	My2 te=new My2();
	Thread12[] dou=new Thread12[5];
	Thread13[]tre=new Thread13[5];
	for(int i=0;i<5;i++){
		dou[i]=new Thread12(te);
		tre[i]=new Thread13(te);
		dou[i].start();
		tre[i].start();
		
	}
}
}
class My2{
	private ReentrantLock lock=new ReentrantLock();
	private Condition condition=lock.newCondition();
	private boolean hasValue=false;
	public void set(){
		try{
			lock.lock();
			while(hasValue==true){
				System.out.println("**");
				condition.await();
			}
			System.out.println("*");
			hasValue=true;
			condition.signal();
		}catch(InterruptedException e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
	public void get(){
		try{
			lock.lock();
			while(hasValue==false){
				System.out.println("^^");
				condition.await();
			}
			System.out.println("^");
			hasValue=false;
			condition.signal();
		}catch(InterruptedException e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
}
class Thread12 extends Thread{
	My2 te;
	public Thread12(My2 te){
		this.te=te;
	}
	public void run(){
		te.set();
	}
}
class Thread13 extends Thread{
	My2 te;
	public Thread13(My2 te){
		this.te=te;
	}
	public void run(){
		te.get();
	}
}