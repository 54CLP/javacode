import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
public class Lock1 {
	public static void main(String[] args) throws InterruptedException {
		MyService service=new MyService();
		ThreadA a=new ThreadA(service);
		a.start();
		Thread.sleep(3000);
		service.signal();
		
	}
}
class MyService{
	private Lock lock=new ReentrantLock();
	private Condition condition=lock.newCondition();
	public void await(){
		try{
			lock.lock();
			System.out.println(("1"));
			condition.await();
		}catch(InterruptedException e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
	public void signal(){
		try{
			lock.lock();
			System.out.println("2");
			condition.signal();
		}finally{
			lock.unlock();
		}
	}
	
	
	
	
}
class ThreadA extends Thread{
	private MyService service;
	public ThreadA(MyService service){
		super();
		this.service=service;
	}
	public void run(){
		service.await();
	}
}
